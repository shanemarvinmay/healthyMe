{"version":3,"sources":["logo.svg","components/Auth.jsx","components/MainMenu.jsx","components/WaterMe.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Auth","props","useState","onClick","auth","MainMenu","choice","WaterMe","water","setWater","onKeyUp","e","keyCode","console","log","num","parseFloat","target","value","handleInput","type","App","user","setUser","screen","className","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,gLCsB5BC,G,MApBJ,SAACC,GAAU,MAEMC,mBAAS,GAFf,6BAIpB,OACE,6BACI,6BACI,qCACA,gCACA,gCACA,4BAAQC,QAAS,kBAAIF,EAAMG,SAA3B,aCUGC,EApBA,SAACJ,GAAU,MAEEC,mBAAS,GAFX,6BAIxB,OACE,6BACI,6BACI,4BAAQC,QAAS,kBAAIF,EAAMK,OAAO,aAAlC,WACA,4BAAQH,QAAS,kBAAIF,EAAMK,OAAO,aAAlC,WACA,4BAAQH,QAAS,kBAAIF,EAAMK,OAAO,eAAlC,aACA,4BAAQH,QAAS,kBAAIF,EAAMK,OAAO,WAAlC,YCsBGC,EAxBD,SAACN,GAAU,MAEGC,mBAAS,GAFZ,mBAEhBM,EAFgB,KAETC,EAFS,KAQvB,OACE,6BACI,6BACI,2CACA,2BAAID,GACJ,2BAAOE,QAAS,SAACC,GAAD,OAtBV,SAACA,GAA0B,IAAvBF,EAAsB,uDAAX,aAC7B,GAAgB,IAAbE,EAAEC,QAAc,CACfC,QAAQC,IAAI,qBACZ,IAAIC,EAAMC,WAAWL,EAAEM,OAAOC,OAC9BT,EAASM,GACTJ,EAAEM,OAAOC,MAAQ,GAErBL,QAAQC,IAAIH,EAAEM,OAAOC,OAeQC,CAAYR,GAAG,SAACI,GAAD,OAAON,EAASD,EAAQO,OAAOK,KAAM,cC2BtEC,MA1Cf,WAAgB,IAAD,EACUnB,mBAAS,CAACE,MAAK,EAAME,OAAO,OADtC,mBACNgB,EADM,KACDC,EADC,KAETC,EAAS,KAiBb,OAhBAX,QAAQC,IAAIQ,EAAKhB,QAEfkB,EADc,GAAbF,EAAKlB,KACG,kBAAC,EAAD,CAAMA,KAAO,kBAAImB,EAAQ,CAACnB,MAAK,OAEnB,WAAfkB,EAAKhB,OACF,uCAEY,aAAfgB,EAAKhB,OACF,uCAEY,SAAfgB,EAAKhB,OACF,kBAAC,EAAD,MAGA,kBAAC,EAAD,CAAUA,OAAQ,SAACA,GAAD,OAAUiB,EAAQ,CAACnB,MAAK,EAAKE,OAAOA,OAG/D,yBAAKmB,UAAU,OACb,4BAAQA,UAAU,cAEfD,EAED,yBAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLZ,OAAO,SACPa,IAAI,uBAJN,kBCzBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.13870fc9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\n\nlet Auth = (props) => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n        <div>\n            <h1>Login</h1>\n            <input />\n            <input />\n            <button onClick={()=>props.auth()}>login</button>\n        </div>\n      {/* <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button> */}\n    </div>\n  );\n}\n\nexport default Auth;","import React, { useState } from 'react';\n\nlet MainMenu = (props) => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n        <div>\n            <button onClick={()=>props.choice(\"profile\")}>profile</button>\n            <button onClick={()=>props.choice(\"fitness\")}>fitness</button>\n            <button onClick={()=>props.choice(\"nutrition\")}>nutrition</button>\n            <button onClick={()=>props.choice(\"water\")}>water</button>\n        </div>\n      {/* <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button> */}\n    </div>\n  );\n}\n\nexport default MainMenu;","import React, { useState } from 'react';\nlet handleInput = (e, setWater = ()=>{}) => {\n    if(e.keyCode == 13){\n        console.log('enter was pressed');\n        let num = parseFloat(e.target.value)\n        setWater(num);\n        e.target.value = '';\n    }\n    console.log(e.target.value);\n};\nlet WaterMe = (props) => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [water, setWater] = useState(0);\n  let input = 0;\n    /**\n     * TODO: retrieve info from firebase\n     * TODO: when user hits enter, submit water\n     */\n  return (\n    <div>\n        <div>\n            <p>waterMe icon</p>\n            <p>{water}</p>\n            <input onKeyUp={(e)=>handleInput(e, (num)=>setWater(water + num))} type={\"number\"} />\n            {/* <button onClick={()=>setWater(input)}>login</button> */}\n        </div>\n      {/* <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button> */}\n    </div>\n  );\n}\n\nexport default WaterMe;","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Auth from './components/Auth';\nimport MainMenu from './components/MainMenu';\nimport WaterMe from './components/WaterMe';\n\nfunction App() {\n  const [user,setUser] = useState({auth:false,choice:null});\n  let screen = null;\n  console.log(user.choice);\n  if(user.auth == false){\n    screen = <Auth auth={ ()=>setUser({auth:true}) } />;\n  }\n  else if(user.choice == \"fitness\"){\n    screen = <h1>fitness</h1>;\n  }\n  else if(user.choice == \"nutrition\"){\n    screen = <h1>nutrion</h1>;\n  }\n  else if(user.choice == \"water\"){\n    screen = <WaterMe />;\n  }\n  else {\n    screen = <MainMenu choice={(choice)=>setUser({auth:true,choice:choice})}/>;\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        {screen}\n\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}